#
#Â© Copyright IBM Corporation 2020, 2021
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.
#

ARG BASE_IMAGE=registry.redhat.io/ubi8/ubi-minimal
ARG BASE_TAG=8.4-205
ARG GO_WORKDIR=/go/src/github.com/ibm-messaging/mq-container-mft

###############################################################################
# Build stage to build Go code
###############################################################################
FROM docker.io/golang:1.14.13 as builder

ARG IMAGE_REVISION="Not specified"
ARG IMAGE_SOURCE="Not specified"
ARG IMAGE_TAG="Not specified"
ARG GO_WORKDIR

# Do everything as root. We will change the user at a later point
USER 0

RUN git --version
RUN go get -u github.com/tidwall/gjson \
    && go get -u golang.org/x/sys/unix \
	&& go get -u golang.org/x/vgo \
    && go get -u github.com/syndtr/gocapability/capability \
    && go get -u github.com/icza/backscanner \ 
   	&& go get -u github.com/antchfx/xmlquery \
	&& go get -u github.com/spf13/pflag 

# Set golang working directory
WORKDIR $GO_WORKDIR/

# Create a directory where compiled golang programs will be copied
RUN mkdir -p /run

# Copy golang source code for compilation	
COPY ./cmd ./cmd

# Build the required go programs and copy them to /run directory
RUN go build -ldflags "-X \"main.ImageCreated=$(date --iso-8601=seconds)\" -X \"main.ImageRevision=$IMAGE_REVISION\" -X \"main.ImageSource=$IMAGE_SOURCE\" -X \"main.ImageTag=$IMAGE_TAG\"" -o /run/runagent ./cmd/runagent/
RUN go build -o /run/agentalive ./cmd/agentalive/
RUN go build -o /run/agentready ./cmd/agentready/
RUN go build -o /run/mqfts ./cmd/mqfts/ 

# Run unit tests
RUN go test -v ./cmd/runagent

###############################################################################
# Main build stage, to build MQMFT image
###############################################################################
FROM $BASE_IMAGE:$BASE_TAG AS mqmft

# Set environment variables so that any shell scripts can make use of them
ARG ARG_MQMFT_ARCHIVE_URL
ARG ARG_MQMFT_DEV_ARCHIVE_URL
ARG ARG_MQMFT_DEV_BUILD
ARG ARG_MQMFT_REDIST_FILE
ARG ARG_MQMFT_DEV_BUILD_CREDENTIAL
ARG ARG_MQMFT_DEV_BUILD_USER
ARG ARG_MQMFT_BFG_DATA

# Use a fixed path for BFG_DATA path. Agent configuration will always be created under 
# this path. If using a persistent volume, then volume must be mounted to this path. 
ENV BFG_DATA=/mnt/mftdata
ENV CREDENTIALS_PATH=/mnt/credentials

# Meta information of our container image
LABEL summary="IBM MQ Managed File Transfer"
LABEL description="Move files and messages"
LABEL vendor="IBM"
LABEL maintainer="IBM"
LABEL distribution-scope="private"
LABEL authoritative-source-url="https://www.ibm.com/software/passportadvantage/"
LABEL url="https://www.ibm.com/products/mq/advanced"
LABEL io.openshift.tags="mq managed file transfer"
LABEL io.k8s.display-name="IBM MQ Managed File Transfer"
LABEL io.k8s.description="Move files and messages"
LABEL base-image=$BASE_IMAGE
LABEL base-image-release=$BASE_TAG

# Do everything as root. We will change the user at a later point
USER 0

# Copy the MFT Redistributable Image into container.
COPY $ARG_MQMFT_REDIST_FILE /usr/local/$ARG_MQMFT_REDIST_FILE

# Install additional packages
RUN microdnf install bash \
  wget \
  file \
  findutils \
  glibc \
  redhat-lsb-core \
  util-linux-ng \  
  sed \
  tar \
  util-linux \
  glibc-all-langpacks \
  && rm -rf /var/lib/apt/lists/* 

# Add the Agent redistributable package
RUN mkdir -p /opt/mqm/mqft \
  && mv /usr/local/$ARG_MQMFT_REDIST_FILE /opt/mqm/mqft \
  && cd /opt/mqm/mqft \
  && tar -xzf ./$ARG_MQMFT_REDIST_FILE \
  && rm -f ./$ARG_MQMFT_REDIST_FILE \
  && chown -R 1001:root /opt/mqm/*


# Copy go programs
COPY --from=builder $GO_WORKDIR/run/runagent /run/
COPY --from=builder $GO_WORKDIR/run/agentalive /run/
COPY --from=builder $GO_WORKDIR/run/agentready /run/
COPY --from=builder $GO_WORKDIR/run/mqfts /run/

# Set permissions on programs so that they can be run by any user.
RUN mkdir -p $BFG_DATA \
    && mkdir -p $CREDENTIALS_PATH \
    && mkdir -p /mountpath \
	&& chmod -R guo+rwx /mountpath \
    && chmod -R guo+rwx $BFG_DATA \
    && chmod -R guo+rwx $CREDENTIALS_PATH \
    && chgrp -Rf root /run/runagent \
    && chmod -Rf guo+rwx /run/runagent \
    && chgrp -Rf root /run/agentalive \
	&& chmod -Rf guo+rwx /run/agentalive \
    && chgrp -Rf root /run/agentready \
	&& chmod -Rf guo+rwx /run/agentready \
    && chgrp -Rf root /run/mqfts \
	&& chmod -Rf guo+rwx /run/mqfts \
	&& mkdir -p /customexits/mqft/pbaexit \
	&& chmod -R guo+rwx /customexits/* \
	&& chown -R 1001:root /customexits/*

# Copy the Bridge Credential Exit into container.
COPY ./credentialsexit/BridgeCredentialExit/bridgecredexit.jar /customexits/mqft/pbaexit/bridgecredexit.jar
COPY ./credentialsexit/BridgeCredentialExit/thirdparty/json-20210307.jar /customexits/mqft/pbaexit/json-20210307.jar

# Set path so that we can run our programs
ENV PATH=$PATH:/opt/mqm/mqft/bin:/opt/mqm/mqft/java/jre64/jre/bin:/opt/mqm/bin:/run

# We will use USER ID 1001
USER 1001

# Call our entry point
ENTRYPOINT ["runagent"]
